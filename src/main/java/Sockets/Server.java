/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Sockets;

import Profile.Message;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

public class Server {
    private int port;
    private Set<String> userNames = new HashSet<>();
    private Set<UserThread> userThreads = new HashSet<>();
    private ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(10);

    private Server(int port) {
        this.port = port;
    }

    Set<String> getUserNames() {
        return this.userNames;
    }

    /**
     * Delivers a message from one user to others (broadcasting) Asynchronous
     * execution
     */
    void broadcast(Message message, UserThread excludeUser) {
        System.out.println("Now broadcasting");
        // TODO: Modify function to broadcast to only predetermined list of sockets
        new Thread(() -> {
            for (UserThread aUser : userThreads) {
                if (aUser != excludeUser) {
                    try {
                        aUser.sendMessage(message);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();
    }

    private void execute() {
        try (ServerSocket serverSocket = new ServerSocket(port)) {

            System.out.println("Chat Server is listening on port " + port);
            Integer connected = 0;
            while (connected < 10) {
                Socket socket = serverSocket.accept();
                System.out.println("New user connected");
                UserThread newUser = new UserThread(socket, this);
                userThreads.add(newUser);
                executor.execute(newUser);
                connected++;
            }
            executor.shutdown();
        } catch (IOException ex) {
            System.out.println("Error in the server: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    public static void main(String[] args) {
        int port = 8080;
        Server server = new Server(port);
        server.execute();
    }
}

class Routing {
    // HashMap<Integer, ArrayList<User>> userchannels;
}
